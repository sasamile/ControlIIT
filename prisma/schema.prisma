// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MAINTENANCE
}

enum RequestStatus {
  Pendiente
  Aprobado
  Rechazado
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  phone         String?
  image         String?
  role          UserRole  @default(USER)
  otpToken      String? // Guardamos el token temporalmente
  otpExpires    DateTime? // Fecha de expiración del token

  accounts    Account[]
  assignments Assignment[]
  requests    Request[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Inventory {
  id                String  @id @default(cuid())
  element           String
  class             String
  subclass          String?
  brand             String?
  totalQuantity     Int     @default(0)
  availableQuantity Int

  assignments Assignment[] // Relación con las asignaciones

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([element, brand])
}

model Assignment {
  id String @id @default(cuid())

  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  image        String?
  quantity     Int     @default(1)
  reference    String?
  serial       String?
  location     String
  owner        String
  status       String
  availability String?
  details      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model Assignment {
//   id           String  @id @default(cuid())
//   class        String
//   subclass     String?
//   element      String?
//   reference    String?
//   serial       String?
//   brand        String?
//   owner        String
//   location     String
//   status       String
//   details      String?
//   availability String?

//   userId String
//   user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Request {
  id          String        @id @default(cuid())
  description String
  reason      String
  status      RequestStatus @default(Pendiente)
  requestType String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
